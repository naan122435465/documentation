-Đối tượng (object):Một đối tượng bao gồm 2 thông tin: thuộc tính và phương thức.
-Lớp (class):Bên trong lớp cũng có 2 thành phần chính đó là thuộc tính và phương thức.
Lớp là một khuôn mẫu còn đối tượng là một thể hiện cụ thể dựa trên khuôn mẫu đó.
-Abstract class: Lớp Abstract sẽ định nghĩa các phương thức (hàm) mà từ đó các lớp con sẽ kế thừa nó và Overwrite lại (tính đa hình). keyword : extends .
	+Các phương thức ( hàm ) khi được khai báo là abstract thì chỉ được định nghĩa chứ không được phép viết code xử lý trong phương thức.còn nếu abstract class không có hàm khai báo 
abstract thì viết như thường.
	+Phương thức abstract chỉ có thể khai báo trong abstract class.
	+Các thuộc tính trong abstract class thì không được khai báo là abstract.
	+Không thể khởi tạo một abstract class. chỉ được thừa kế. 
	+Vì không thể khởi tạo được abstract class nên các phương thức được khai báo là abstract chỉ được khai báo ở mức độ protected và public.
	+Các lớp kế thừa một abstract class phải định nghĩa lại tất cả các phương thức trong abstract class đó ( nếu không sẽ bị lỗi).
-Interface trong hướng đối tượng là một khuôn mẫu, giúp cho chúng ta tạo ra bộ khung cho một hoặc nhiều đối tượng và nhìn vào interface thì chúng ta hoàn toàn có thể xác định được các 
phương thức và các thuộc tính cố định (hay còn gọi là hằng) sẽ có trong đối tượng implement nó.
	+Interface không phải là một đối tượng.
	+Trong interface chúng ta chỉ được khai báo phương thức chứ không được định nghĩa chúng.
	+Trong interface chúng ta có thể khai báo được hằng nhưng không thể khai báo biến.
	+Một interface không thể khởi tạo được (vì nó không phải là một đối tượng).	
	+Các lớp implement interface thì phải khai báo và định nghĩa lại các phương thức có trong interface đó.
	+Một class có thể implements nhiều interface.
	+Các interface có thể kế thừa lẫn nhau.
- Tính kế thừa (inheritance) : Tính kế thừa trong lập trình hướng đối tượng cho phép một lớp (class) có thể kế thừa các thuộc tính và phương thức từ các lớp khác đã được định nghĩa. Lớp
 được kế thừa còn được gọi là lớp cha và lớp kế thừa được gọi là lớp con.
Điều này cho phép các đối tượng có thể tái sử dụng hay mở rộng các đặc tính sẵn có mà không phải tiến hành định nghĩa lại.Trong PHP để khai báo kế thừa từ một lớp cha chúng ta sử dụng từ khóa extends
-Tính đóng gói (encapsulation): 
	+Private:Khi các thuộc tính và phương thức khai báo với giới hạn này thì các thuộc tính phương thức đó chỉ có thể sử dụng được trong class đó, bên ngoài class không thể nào có thể sử dụng được nó kể cả lớp kế thừa nó cũng không sử dụng được, nếu muốn lấy giá trị hoặc gán giá trị ở bên ngoài class thì chúng ta phải thông qua hai hàm SET và GET.
	+protected thì chúng ngoài được sử dụng trong class đó ra thì class con kết thừa từ nó cũng có thể sử dụng được, như bên ngoài class không có thể sử dụng được.
	+public.
- Tính đa hình (polymorphism):ớp Con sẽ viết lại những phương thức ở lớp cha (ovewrite). Các class cùng implement một interface nhưng chúng có cách thức thực hiện khác nhau cho các method của interface đó.
-Static trong lập trình hướng đối tượng là một thành phần tĩnh (có thể là thuộc tính hoặc phương thức) mà nó hoạt động như một biến toàn cục, dù cho nó có được xử lý ở trong bất kỳ một file nào đi nữa (trong cùng một chương trình) thì nó đều lưu lại giá trị cuối cùng mà nó được thực hiện vào trong 
	+ cách gọi phương thức Static :
		+trong class: selft::ten hoặc ClassName::ten hoặc static::ten.(Self: Truy xuất đến class khai báo nó.Static: Truy xuất đến đối tượng hiện tại.)
		+ ngoài class: ClassName::tenPhuongThuc(), ClassName::$tenthuoctinh.
-Trait : +không giống phải kế thừa 1 class hay interface để sử dụng lại 1 nhóm chức năng, thì với trait bạn không cần phải kế thừa vẫn có thể sử dụng được.
	+Traits có chức năng gom lại các phương thức và thuộc tính mà chúng ta muốn sử dụng lại nhiều lần.
	+các phương thức trong Traits có thể bị override lại trong class sử dụng nó.
	+các phương thức trong Traits có thể bị override lại trong class sử dụng nó:
- Một số Magic methods trong PHP
	__construct(): gọi khi khởi tạo đối tượng.	
	__ddestruct(): gọi khi hủy đối tượng.
	__set(): gọi khi ta truyền dữ liệu cho một thuộc tính không được phép truy cập.
	__get(): khi đọc dữ liệu từ một thuộc tính không được phép truy cập.
	__isset(): được gọi khi gọi hàm isset() hoặc empty() trên một thuộc tính không được phép truy cập.
	__unset(): được gọi khi hàm unset() được sử dụng trong một thuộc tính không được phép truy cập.
	__call():được gọi khi ta gọi một phương thức không được phép truy cập trong phạm vi của một đối tượng.
	__callstatic(): được kích hoạt khi ta gọi một phương thức không được phép truy cập trong phạm vi của một phương thức tĩnh.
	__toString(): phương thức này giúp class chỉ định xem sẽ in ra cái gì khi nó được dùng.
	__invoke():phương thức này được gọi khi một lệnh cố gắng gọi một đối tượng như một hàm.
	__sleep(): được gọi khi serialize() một đối tượng.
	__wakeup: được gọi khi unserialize() đối tượng.
	__set_state(): được gọi khi chúng ta var_export() đối tượng.
	__clone(): được sử dụng khi chúng ta clone một object.
	__debugInfo(): được gọi khi chúng ta sử dụng hàm vardump().